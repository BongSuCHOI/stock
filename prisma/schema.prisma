generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Fundamental {
  STK_CD            String     @id @db.VarChar(40)
  STK_TD            String?    @db.VarChar(40)
  STK_CLOSE         Int?
  STK_VOLUME        Int?
  issued_share      String?    @db.VarChar(40)
  cap               String?    @db.VarChar(40)
  dividend          String?    @db.VarChar(40)
  div_release_date  String?    @db.VarChar(40)
  total_revenue     String?    @db.VarChar(40)
  operating_income  String?    @db.VarChar(40)
  net_income        String?    @db.VarChar(40)
  total_assets      String?    @db.VarChar(40)
  total_liabilities String?    @db.VarChar(40)
  total_equity      String?    @db.VarChar(40)
  stk_item          Stock_Item @relation(fields: [STK_CD], references: [STK_CD], onDelete: NoAction, onUpdate: NoAction, map: "Fundamental_ibfk_1")
}

model STK_OHLCV {
  STK_CD     String     @db.VarChar(40)
  STK_YEAR   String     @db.VarChar(40)
  STK_OPEN   Int?
  STK_HIGH   Int?
  STK_LOW    Int?
  STK_CLOSE  Int?
  STK_VOLUME Int?
  stk_item   Stock_Item @relation(fields: [STK_CD], references: [STK_CD], onDelete: NoAction, onUpdate: NoAction, map: "STK_OHLCV_ibfk_1")

  @@id([STK_CD, STK_YEAR])
}

model Stock_Item {
  STK_CD         String           @unique @db.VarChar(40)
  STK_NM         String?          @db.VarChar(200)
  STK_MK         String?          @db.VarChar(40)
  STK_TD         String           @db.VarChar(40)
  fundamental    Fundamental?
  stk_ohlcv      STK_OHLCV[]
  stk_textdata   Stock_textdata[]
  stk_result     stock_result?

  @@id([STK_CD, STK_TD])
}

model Stock_textdata {
  STK_CD     String     @db.VarChar(40)
  DATADAY    String?    @db.VarChar(40)
  title      String     @id @db.VarChar(40)
  content    String?    @db.VarChar(40)
  DATA_type  String?    @db.VarChar(40)
  url        String?    @db.VarChar(200)
  stk_item   Stock_Item @relation(fields: [STK_CD], references: [STK_CD], onDelete: NoAction, onUpdate: NoAction, map: "Stock_textdata_ibfk_1")

  @@index([STK_CD], map: "STK_CD")
}

model auth_group {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @unique(map: "name") @db.VarChar(150)
  auth_group_permissions auth_group_permissions[]
  auth_user_groups       auth_user_groups[]
}

model auth_group_permissions {
  id              BigInt          @id @default(autoincrement())
  group_id        Int
  permission_id   Int
  auth_permission auth_permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_group_permissio_permission_id_84c5c92e_fk_auth_perm")
  auth_group      auth_group      @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_group_permissions_group_id_b120cbf9_fk_auth_group_id")

  @@unique([group_id, permission_id], map: "auth_group_permissions_group_id_permission_id_0cd325b0_uniq")
  @@index([permission_id], map: "auth_group_permissio_permission_id_84c5c92e_fk_auth_perm")
}

model auth_permission {
  id                         Int                          @id @default(autoincrement())
  name                       String                       @db.VarChar(255)
  content_type_id            Int
  codename                   String                       @db.VarChar(100)
  auth_group_permissions     auth_group_permissions[]
  django_content_type        django_content_type          @relation(fields: [content_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_permission_content_type_id_2f476e4b_fk_django_co")
  auth_user_user_permissions auth_user_user_permissions[]

  @@unique([content_type_id, codename], map: "auth_permission_content_type_id_codename_01ab375a_uniq")
}

model auth_user {
  id                         Int                          @id @default(autoincrement())
  password                   String                       @db.VarChar(128)
  last_login                 DateTime?                    @db.DateTime(6)
  is_superuser               Boolean
  username                   String                       @unique(map: "username") @db.VarChar(150)
  first_name                 String                       @db.VarChar(150)
  last_name                  String                       @db.VarChar(150)
  email                      String                       @db.VarChar(254)
  is_staff                   Boolean
  is_active                  Boolean
  date_joined                DateTime                     @db.DateTime(6)
  auth_user_groups           auth_user_groups[]
  auth_user_user_permissions auth_user_user_permissions[]
  django_admin_log           django_admin_log[]
}

model auth_user_groups {
  id         BigInt     @id @default(autoincrement())
  user_id    Int
  group_id   Int
  auth_group auth_group @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_user_groups_group_id_97559544_fk_auth_group_id")
  auth_user  auth_user  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_user_groups_user_id_6a12ed8b_fk_auth_user_id")

  @@unique([user_id, group_id], map: "auth_user_groups_user_id_group_id_94350c0c_uniq")
  @@index([group_id], map: "auth_user_groups_group_id_97559544_fk_auth_group_id")
}

model auth_user_user_permissions {
  id              BigInt          @id @default(autoincrement())
  user_id         Int
  permission_id   Int
  auth_permission auth_permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm")
  auth_user       auth_user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id")

  @@unique([user_id, permission_id], map: "auth_user_user_permissions_user_id_permission_id_14a6b632_uniq")
  @@index([permission_id], map: "auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm")
}

model django_admin_log {
  id                  Int                  @id @default(autoincrement())
  action_time         DateTime             @db.DateTime(6)
  object_id           String?              @db.LongText
  object_repr         String               @db.VarChar(200)
  action_flag         Int                  @db.UnsignedSmallInt
  change_message      String               @db.LongText
  content_type_id     Int?
  user_id             Int
  django_content_type django_content_type? @relation(fields: [content_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "django_admin_log_content_type_id_c4bce8eb_fk_django_co")
  auth_user           auth_user            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "django_admin_log_user_id_c564eba6_fk_auth_user_id")

  @@index([content_type_id], map: "django_admin_log_content_type_id_c4bce8eb_fk_django_co")
  @@index([user_id], map: "django_admin_log_user_id_c564eba6_fk_auth_user_id")
}

model django_content_type {
  id               Int                @id @default(autoincrement())
  app_label        String             @db.VarChar(100)
  model            String             @db.VarChar(100)
  auth_permission  auth_permission[]
  django_admin_log django_admin_log[]

  @@unique([app_label, model], map: "django_content_type_app_label_model_76bd3d3b_uniq")
}

model django_migrations {
  id      BigInt   @id @default(autoincrement())
  app     String   @db.VarChar(255)
  name    String   @db.VarChar(255)
  applied DateTime @db.DateTime(6)
}

model django_session {
  session_key  String   @id @db.VarChar(40)
  session_data String   @db.LongText
  expire_date  DateTime @db.DateTime(6)

  @@index([expire_date], map: "django_session_expire_date_a5c62663")
}

model stock_result {
  STK_CD     String     @id @db.VarChar(40)
  STK_YEAR   String?    @db.VarChar(20)
  STK_RESULT String?    @db.VarChar(40)
  stk_item   Stock_Item @relation(fields: [STK_CD], references: [STK_CD], onDelete: NoAction, onUpdate: NoAction, map: "stock_result_ibfk_1")
}

model stockaws_mainappmodel {
  id         BigInt  @id @default(autoincrement())
  main_intro String? @db.VarChar(255)
}
